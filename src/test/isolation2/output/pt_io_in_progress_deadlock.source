--
-- Validate that PersistentObjLock is not acquired while io_in_progress lock is
-- held on a buffer.
--

create extension if not exists gp_inject_fault;
CREATE

create function flush_relation_buffers(oid) returns void as '@abs_builddir@/isolation2_regress@DLSUFFIX@' language c immutable strict no sql;
CREATE

-- We need a user defined filespace because the filespace and tablespace hash
-- tables are ignored when accessing tables in the default/system tablespace.
create filespace pt_deadlock_fs @gpfilespace_regressionfs1@;
CREATE
create tablespace pt_deadlock_ts filespace pt_deadlock_fs;
CREATE
create table pt_deadlock_table (a int, b int) tablespace pt_deadlock_ts;
CREATE

-- We want to flush a buffer through this test, so suspend checkpointer and
-- bgwriter processes.
select gp_inject_fault('checkpoint', 'suspend', dbid) from gp_segment_configuration where role = 'p' and content > -1;
gp_inject_fault
---------------
t              
t              
t              
(3 rows)
select gp_inject_fault('fault_in_background_writer_main', 'suspend', dbid) from gp_segment_configuration where role = 'p' and content > -1;
gp_inject_fault
---------------
t              
t              
t              
(3 rows)

insert into pt_deadlock_table select i,i from generate_series(1,1000)i;
INSERT 1000

-- By suspending fault_before_pending_delete_relation_entry here, the query
-- executor will be suspended while holding the PersistentObjLock on the
-- segments.
select gp_inject_fault('fault_before_pending_delete_relation_entry', 'suspend', dbid) from gp_segment_configuration where role = 'p' and content > -1;
gp_inject_fault
---------------
t              
t              
t              
(3 rows)

-- Backend 1 obtains PersistentObjLock and blocks.
1&: create table acquire_pt_lock_table (a int) distributed by (a);  <waiting ...>

select gp_inject_fault('fault_before_pending_delete_relation_entry', 'status', dbid) from gp_segment_configuration where role = 'p' and content > -1;
gp_inject_fault
---------------
t              
t              
t              
(3 rows)

-- Backend 2 flushes the dirty buffers in the pt_deadlock_table, and as a result
-- will attempt to access the filespace and tablespace hash tables. It will
-- acquire io_in_progress lock before accessing the hash tables, and will block
-- if it also attempts to acquire PersistentObjLock.
2: select flush_relation_buffers(oid) from gp_dist_random('pg_class') where relname = 'pt_deadlock_table';
flush_relation_buffers
----------------------
                      
                      
                      
(3 rows)

-- The fact that backend 2 completed flushing the relation buffers indicates
-- that this test was successful.

-- Clean up faults
select gp_inject_fault('all', 'reset', dbid) from gp_segment_configuration where role = 'p' and content > -1;
gp_inject_fault
---------------
t              
t              
t              
(3 rows)

1<:  <... completed>
CREATE

-- Because filespaces persist through database drop, we need to clean up the
-- filespace/tablespace explicitly.
drop table pt_deadlock_table;
DROP
drop tablespace pt_deadlock_ts;
DROP
drop filespace pt_deadlock_fs;
DROP
