<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ih135496">Working with JSON Data</title>
  <shortdesc>Greenplum Database supports the <codeph>json</codeph> data type that stores JSON
    (JavaScript Object Notation) data.</shortdesc>
  <body>
    <p>Greenplum Database supports JSON as specified in the <xref href="https://tools.ietf.org/html/rfc7159"
        format="html" scope="external">RFC 7159</xref> document and enforces data validity according
      to the JSON rules. There are also JSON-specific functions and operators available for
        <codeph>json</codeph> data. See <xref href="#topic_gn4_x3w_mq" format="dita"/>. </p>
    <p>This section contains the following topics:<ul id="ul_sjd_hsr_fz">
        <li><xref href="#topic_upc_tcs_fz" format="dita"/></li>
        <li><xref href="#topic_isn_ltw_mq" format="dita"/></li>
        <li><xref href="#topic_eyt_3tw_mq" format="dita"/></li>
        <li><xref href="#topic_gn4_x3w_mq" format="dita"/></li>
      </ul></p>
  </body>
  <topic id="topic_upc_tcs_fz">
    <title>About JSON Data</title>
    <body>
      <p>When Greenplum Database stores data as <codeph>json</codeph> data type, an exact copy of
        the input text is stored and the JSON processing functions reparse the data on each
          execution.<ul id="ul_lzs_c5p_fz">
          <li>Semantically-insignificant white space between tokens is retained, as well as the
            order of keys within JSON objects. </li>
          <li>All key/value pairs are kept even if a JSON object contains duplicate keys. For
            duplicate keys, JSON processing functions consider the last value as the operative
            one.</li>
        </ul></p>
      <p>Greenplum Database allows only one character set encoding per database. It is not possible
        for the <codeph>json</codeph> type to conform rigidly to the JSON specification unless the
        database encoding is UTF8. Attempts to include characters that cannot be represented in the
        database encoding will fail. Characters that can be represented in the database encoding but
        not in UTF8 are allowed.</p>
      <p>The RFC 7159 document permits JSON strings to contain Unicode escape sequences denoted by
            <codeph>\u<varname>XXXX</varname></codeph>. For the <codeph>json</codeph> type, the
        Greenplum Database input function allows Unicode escapes regardless of the database encoding
        and checks Unicode escapes only for syntactic correctness (a <codeph>\u</codeph> followed by
        four hex digits).</p>
      <note>Many of the JSON processing functions described in <xref href="#topic_gn4_x3w_mq"
          format="dita">JSON Functions and Operators</xref> convert Unicode escapes to regular
        characters. The functions throw an error for characters that cannot be represented in the
        database encoding. You should avoid mixing Unicode escapes in JSON with a non-UTF8 database
        encoding, if possible.</note>
    </body>
  </topic>
  <topic id="topic_isn_ltw_mq">
    <title>JSON Input and Output Syntax</title>
    <body>
      <p>The input and output syntax for the <codeph>json</codeph> data type is as specified in RFC
        7159.</p>
      <p>The following are all valid <codeph>json</codeph> expressions:</p>
      <pre>-- Simple scalar/primitive value
-- Primitive values can be numbers, quoted strings, true, false, or null
SELECT '5'::json;

-- Array of zero or more elements (elements need not be of same type)
SELECT '[1, 2, "foo", null]'::json;

-- Object containing pairs of keys and values
-- Note that object keys must always be quoted strings
SELECT '{"bar": "baz", "balance": 7.77, "active": false}'::json;

-- Arrays and objects can be nested arbitrarily
SELECT '{"foo": [true, "bar"], "tags": {"a": 1, "b": null}}'::json;</pre>
    </body>
  </topic>
  <topic id="topic_eyt_3tw_mq">
    <title>Designing JSON documents</title>
    <body>
      <p>Representing data as JSON can be considerably more flexible than the traditional relational
        data model, which is compelling in environments where requirements are fluid. It is quite
        possible for both approaches to co-exist and complement each other within the same
        application. However, even for applications where maximal flexibility is desired, it is
        still recommended that JSON documents have a somewhat fixed structure. The structure is
        typically unenforced (though enforcing some business rules declaratively is possible), but
        having a predictable structure makes it easier to write queries that usefully summarize a
        set of "documents" (datums) in a table.</p>
      <p>JSON data is subject to the same concurrency-control considerations as any other data type
        when stored in a table. Although storing large documents is practicable, keep in mind that
        any update acquires a row-level lock on the whole row. Consider limiting JSON documents to a
        manageable size in order to decrease lock contention among updating transactions. Ideally,
        JSON documents should each represent an atomic datum that business rules dictate cannot
        reasonably be further subdivided into smaller datums that could be modified
        independently.</p>
    </body>
  </topic>
  <topic id="topic_gn4_x3w_mq">
    <title>JSON Functions and Operators</title>
    <body>
      <p>Built-in functions and operators that create and manipulate JSON data.<ul
          id="ul_ypx_f4w_2z">
          <li><xref href="#topic_o5y_14w_2z" format="dita"/></li>
          <li><xref href="#topic_u4s_wnw_2z" format="dita"/></li>
          <li><xref href="#topic_z5d_snw_2z" format="dita"/></li>
        </ul></p>
      <note>For <codeph>json</codeph> values, all key/value pairs are kept even if a JSON object
        contains duplicate keys. For duplicate keys, JSON processing functions consider the last
        value as the operative one.</note>
    </body>
    <topic id="topic_o5y_14w_2z">
      <title>JSON Operators</title>
      <body>
        <p>This table describes the operators that are available for use with the
            <codeph>json</codeph> data type.</p>
        <table id="table_e41_y3w_mq">
          <title><varname>json</varname> Operators</title>
          <tgroup cols="5">
            <colspec colnum="1" colname="col1" colwidth="1*"/>
            <colspec colnum="2" colname="col2" colwidth="1.17*"/>
            <colspec colnum="3" colname="col3" colwidth="2.79*"/>
            <colspec colnum="4" colname="col4" colwidth="2.78*"/>
            <colspec colnum="5" colname="col5" colwidth="1.92*"/>
            <thead>
              <row>
                <entry>Operator</entry>
                <entry>Right Operand Type</entry>
                <entry>Description</entry>
                <entry>Example</entry>
                <entry>Example Result</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <codeph>-></codeph>
                </entry>
                <entry>
                  <codeph>int</codeph>
                </entry>
                <entry>Get JSON array element (indexed from zero).</entry>
                <entry>
                  <codeph>'[{"a":"foo"},{"b":"bar"},{"c":"baz"}]'::json->2</codeph>
                </entry>
                <entry>
                  <codeph>{"c":"baz"}</codeph>
                </entry>
              </row>
              <row>
                <entry>
                  <codeph>-></codeph>
                </entry>
                <entry>
                  <codeph>text</codeph>
                </entry>
                <entry>Get JSON object field by key.</entry>
                <entry>
                  <codeph>'{"a": {"b":"foo"}}'::json->'a'</codeph>
                </entry>
                <entry>
                  <codeph>{"b":"foo"}</codeph>
                </entry>
              </row>
              <row>
                <entry>
                  <codeph>->></codeph>
                </entry>
                <entry>
                  <codeph>int</codeph>
                </entry>
                <entry>Get JSON array element as text.</entry>
                <entry>
                  <codeph>'[1,2,3]'::json->>2</codeph>
                </entry>
                <entry>
                  <codeph>3</codeph>
                </entry>
              </row>
              <row>
                <entry>
                  <codeph>->></codeph>
                </entry>
                <entry>
                  <codeph>text</codeph>
                </entry>
                <entry>Get JSON object field as text.</entry>
                <entry>
                  <codeph>'{"a":1,"b":2}'::json->>'b'</codeph>
                </entry>
                <entry>
                  <codeph>2</codeph>
                </entry>
              </row>
              <row>
                <entry>
                  <codeph>#></codeph>
                </entry>
                <entry>
                  <codeph>text[]</codeph>
                </entry>
                <entry>Get JSON object at specified path.</entry>
                <entry><codeph>'{"a": {"b":{"c": "foo"}}}'::json#>'{a,b}</codeph>'</entry>
                <entry>
                  <codeph>{"c": "foo"}</codeph>
                </entry>
              </row>
              <row>
                <entry>
                  <codeph>#>></codeph>
                </entry>
                <entry>
                  <codeph>text[]</codeph>
                </entry>
                <entry>Get JSON object at specified path as text.</entry>
                <entry>
                  <codeph>'{"a":[1,2,3],"b":[4,5,6]}'::json#>>'{a,2}'</codeph>
                </entry>
                <entry>
                  <codeph>3</codeph>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </body>
    </topic>
    <topic id="topic_u4s_wnw_2z">
      <title>JSON Creation Functions</title>
      <body>
        <p>This table describes the functions that create <codeph>json</codeph> values.</p>
        <table id="table_sqb_y3w_mq">
          <title>JSON Creation Functions</title>
          <tgroup cols="4">
            <colspec colnum="1" colname="col1"/>
            <colspec colnum="2" colname="col2"/>
            <colspec colnum="3" colname="col3"/>
            <colspec colnum="4" colname="col4"/>
            <thead>
              <row>
                <entry>Function</entry>
                <entry>Description</entry>
                <entry>Example</entry>
                <entry>Example Result</entry>
              </row>
            </thead>
            <tbody>
<!--
              <row>
                <entry><codeph>to_json(anyelement)</codeph></entry>
                <entry>Returns the value as a valid JSON object. Arrays and composites are processed
                  recursively and are converted to arrays and objects. If the input contains a cast
                  from the type to <codeph>json</codeph>, the <codeph>cast</codeph> function is used
                  to perform the conversion; otherwise, a JSON scalar value is produced. For any
                  scalar type other than a number, a Boolean, or a null value, the text
                  representation is be used, properly quoted and escaped so that it is a valid JSON
                  string.</entry>
                <entry>
                  <codeph>to_json('Fred said "Hi."'::text)</codeph>
                </entry>
                <entry>
                  <codeph>"Fred said \"Hi.\""</codeph>
                </entry>
              </row>
-->
              <row>
                <entry><codeph>array_to_json(anyarray [, pretty_bool])</codeph></entry>
                <entry>Returns the array as a JSON array. A Greenplum Database multidimensional
                  array becomes a JSON array of arrays. <p>Line feeds are added between dimension 1
                    elements if <cmdname>pretty_bool</cmdname> is <codeph>true</codeph>.</p></entry>
                <entry>
                  <codeph>array_to_json('{{1,5},{99,100}}'::int[])</codeph>
                </entry>
                <entry>
                  <codeph>[[1,5],[99,100]]</codeph>
                </entry>
              </row>
              <row>
                <entry><codeph>row_to_json(record [, pretty_bool])</codeph></entry>
                <entry>Returns the row as a JSON object. <p>Line feeds are added between level 1
                    elements if <codeph>pretty_bool</codeph> is <codeph>true</codeph>.</p></entry>
                <entry>
                  <codeph>row_to_json(row(1,'foo'))</codeph>
                </entry>
                <entry>
                  <codeph>{"f1":1,"f2":"foo"}</codeph>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
<!--
        <note><codeph>array_to_json</codeph> and <codeph>row_to_json</codeph> have the same behavior
          as <codeph>to_json</codeph> except for offering a pretty-printing option. The behavior
          described for <codeph>to_json</codeph> also applies to individual values converted by the
          other JSON creation functions.</note>
-->
      </body>
    </topic>
    <topic id="topic_z5d_snw_2z">
      <title>JSON Processing Functions</title>
      <body>
        <p>This table describes the functions that process <codeph>json</codeph> values.</p>
        <table id="table_wfc_y3w_mq">
          <title>JSON Processing Functions</title>
          <tgroup cols="5">
            <colspec colnum="1" colname="col1" colwidth="1.08*"/>
            <colspec colnum="2" colname="col2" colwidth="1*"/>
            <colspec colnum="3" colname="col3" colwidth="1.01*"/>
            <colspec colnum="4" colname="col4" colwidth="1.24*"/>
            <colspec colnum="5" colname="col5" colwidth="1.01*"/>
            <thead>
              <row>
                <entry>Function</entry>
                <entry>Return Type</entry>
                <entry>Description</entry>
                <entry>Example</entry>
                <entry>Example Result</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><codeph>json_each(json)</codeph></entry>
                <entry>
                  <codeph>setof key text, value json</codeph>
                  <p>
                    <codeph>setof key text, value jsonb</codeph>
                  </p>
                </entry>
                <entry>Expands the outermost JSON object into a set of key/value pairs.</entry>
                <entry><codeph>select * from json_each('{"a":"foo", "b":"bar"}')</codeph>
                </entry>
                <entry>
                  <pre> key | value
-----+-------
 a   | "foo"
 b   | "bar"
</pre>
                </entry>
              </row>
              <row>
                <entry><codeph>json_each_text(json)</codeph></entry>
                <entry><codeph>setof key text, value text</codeph>
                </entry>
                <entry>Expands the outermost JSON object into a set of key/value pairs. The returned
                  values are of type <codeph>text</codeph>.</entry>
                <entry><codeph>select * from json_each_text('{"a":"foo", "b":"bar"}')</codeph>
                </entry>
                <entry>
                  <pre> key | value
-----+-------
 a   | foo
 b   | bar
</pre>
                </entry>
              </row>
              <row>
                <entry><codeph>json_extract_path(from_json json, VARIADIC path_elems
                    text[])</codeph></entry>
                <entry><codeph>json</codeph>
                </entry>
                <entry>Returns the JSON value specified to by <codeph>path_elems</codeph>.
                  Equivalent to <codeph>#></codeph> operator.</entry>
                <entry>
                  <codeph>json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"foo"}}','f4')</codeph>
                </entry>
                <entry>
                  <codeph>{"f5":99,"f6":"foo"}</codeph>
                </entry>
              </row>
              <row>
                <entry>
                  <p><codeph>json_extract_path_text(from_json json, VARIADIC path_elems
                      text[])</codeph></p>
                </entry>
                <entry><codeph>text</codeph>
                </entry>
                <entry>Returns the JSON value specified to by <codeph>path_elems</codeph> as text.
                  Equivalent to <codeph>#>></codeph> operator.</entry>
                <entry>
                  <codeph>json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"foo"}}','f4',
                    'f6')</codeph>
                </entry>
                <entry>
                  <codeph>foo</codeph>
                </entry>
              </row>
              <row>
                <entry><codeph>json_object_keys(json)</codeph></entry>
                <entry><codeph>setof text</codeph>
                </entry>
                <entry>Returns set of keys in the outermost JSON object.</entry>
                <entry>
                  <codeph>json_object_keys('{"f1":"abc","f2":{"f3":"a", "f4":"b"}}')</codeph>
                </entry>
                <entry>
                  <pre> json_object_keys
------------------
 f1
 f2
</pre>
                </entry>
              </row>
              <row>
                <entry><codeph>json_populate_record(base anyelement, from_json
                  json)</codeph></entry>
                <entry><codeph>anyelement</codeph>
                </entry>
                <entry>Expands the object in <codeph>from_json</codeph> to a row whose columns match
                  the record type defined by base. See <xref href="#topic_z5d_snw_2z/json-note"
                    format="dita">Note</xref>.</entry>
                <entry>
                  <codeph>select * from json_populate_record(null::myrowtype,
                    '{"a":1,"b":2}')</codeph>
                </entry>
                <entry>
                  <pre> a | b
---+---
 1 | 2
</pre>
                </entry>
              </row>
              <row>
                <entry><codeph>json_populate_recordset(base anyelement, from_json json)</codeph>
                </entry>
                <entry><codeph>setof anyelement</codeph>
                </entry>
                <entry>Expands the outermost array of objects in <codeph>from_json</codeph> to a set
                  of rows whose columns match the record type defined by <codeph>base</codeph>. See
                    <xref href="#topic_z5d_snw_2z/json-note" format="dita">Note</xref>.</entry>
                <entry>
                  <codeph>select * from json_populate_recordset(null::myrowtype,
                    '[{"a":1,"b":2},{"a":3,"b":4}]')</codeph>
                </entry>
                <entry>
                  <pre> a | b
---+---
 1 | 2
 3 | 4
</pre>
                </entry>
              </row>
              <row>
                <entry><codeph>json_array_elements(json)</codeph></entry>
                <entry><codeph>setof json</codeph></entry>
                <entry>Expands a JSON array to a set of JSON values.</entry>
                <entry><codeph>select * from json_array_elements('[1,true, [2,false]]')</codeph>
                </entry>
                <entry>
                  <pre>   value
-----------
 1
 true
 [2,false]
</pre>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <note id="json-note">Many of these functions and operators convert Unicode escapes in JSON
          strings to regular characters. The functions throw an error for characters that cannot be
          represented in the database encoding.<p>For <codeph>json_populate_record</codeph> and
              <codeph>json_populate_recordset</codeph>, type coercion from JSON is best effort and
            might not result in desired values for some types. JSON keys are matched to identical
            column names in the target row type. JSON fields that do not appear in the target row
            type are omitted from the output, and target columns that do not match any JSON field
            return <codeph>NULL</codeph>.</p></note>
      </body>
    </topic>
  </topic>
</topic>
